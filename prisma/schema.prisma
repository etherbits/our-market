// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    hash          String?
    created_at    DateTime  @default(now())
    number        String?
    image         String?
    accounts      Account[]
    sessions      Session[]
    cart          Cart?
    ratings       Rating[]
    orders        Order[]
    Product       Product[]
}

model Product {
    id          String     @id @default(cuid())
    title       String     @unique
    description String     @db.Text
    price       String
    quantity    Int
    image       String
    smallImage  String     @db.Text
    createdAt   DateTime   @default(now())
    category    Category?  @relation(fields: [categoryId], references: [id])
    categoryId  String?
    cartItems   CartItem[]
    ratings     Rating[]
    user        User       @relation(fields: [userId], references: [id])
    userId      String

    @@index([categoryId])
    @@index([userId])
}

model Category {
    id        String    @id @default(cuid())
    name      String    @unique
    createdAt DateTime  @default(now())
    products  Product[]
}

model Rating {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    rating    Float
    title     String
    message   String   @db.Text
    product   Product  @relation(fields: [productId], references: [id])
    user      User     @relation(fields: [userId], references: [id])
    productId String
    userId    String

    @@index([productId])
    @@index([userId])
}

model CartItem {
    id        String  @id @default(cuid())
    product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
    productId String
    quantity  Int
    cart      Cart    @relation(fields: [cartId], references: [id], onUpdate: Cascade, onDelete: Cascade)
    cartId    String

    @@index([productId])
    @@index([cartId])
}

model Cart {
    id        String     @id @default(cuid())
    createdAt DateTime   @default(now())
    user      User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String?    @unique
    items     CartItem[]

    @@index([userId])
}

model Order {
    id           String   @id @default(cuid())
    createdAt    DateTime @default(now())
    user         User?    @relation(fields: [userId], references: [id])
    userId       String?
    status       String
    totalAmount  Int
    customerNote String

    @@index([userId])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
